buildscript {
  repositories {
    maven {
      url 'https://repox.jfrog.io/repox/plugins.gradle.org/'
    }
  }
}
plugins {
    id 'org.sonarqube' version '2.7.1'
    id 'com.jfrog.artifactory' version '4.21.0'
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'signing'
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

ext {
    release = project.hasProperty('release') && project.getProperty('release')
    buildNumber = System.getProperty("buildNumber")
}
// Replaces the version defined in sources, usually x.y-SNAPSHOT, by a version identifying the build.
if (version.endsWith('-SNAPSHOT') && ext.buildNumber != null) {
    def versionSuffix = (version.toString().count('.') == 1 ? ".0.${ext.buildNumber}" : ".${ext.buildNumber}")
    version = version.replace('-SNAPSHOT', versionSuffix)
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    // Workaround for bug in JDK 11.0.7 - https://bugs.openjdk.org/browse/JDK-8295850
    options.addStringOption("tag", "javax.annotation.ParametersAreNonnullByDefault:ParametersAreNonnullByDefault")
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://repox.jfrog.io/repox/sonarsource"
        }
    }
}

sonarqube {
    properties {
        property 'sonar.projectName', projectTitle
        property 'sonar.projectKey', project.group + ':sonar-jacoco'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

test.finalizedBy jacocoTestReport

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.6.2'
    testImplementation 'org.mockito:mockito-core:4.9.0'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.sonarsource.api.plugin:sonar-plugin-api:9.13.0.360'
    testImplementation 'org.sonarsource.sonarqube:sonar-plugin-api-impl:9.7.1.62043'
} 

test {
    useJUnitPlatform()
}

license {
    header = rootProject.file('LICENSE_HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    strictCheck true
    mapping {
      java = 'SLASHSTAR_STYLE'
      js = 'SLASHSTAR_STYLE'
      ts = 'SLASHSTAR_STYLE'
      tsx = 'SLASHSTAR_STYLE'
      css = 'SLASHSTAR_STYLE'
      less = 'SLASHSTAR_STYLE'
    }
    excludes(['**/*.txt', '**/*.properties', '**/*.xml', '**/*.xsd', '**/*.html', '**/*.json', '**/*.sql', '**/*.rb', '**/*.vm', '**/*.snap', '**/*.svg', '**/*.jar', '**/*.zip', '**/*.log', '**/*.cnf', '**/*.jks', '**/README', '**/*.pdf'])
}


jar {
    manifest {
        def version = archiveVersion.getOrNull()
        def displayVersion = project.hasProperty('buildNumber') ? version.substring(0, version.lastIndexOf('.')) + " (build ${project.buildNumber})" : version
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonar.plugins.jacoco.JacocoPlugin',
                'Plugin-Description': 'JaCoCo XML report importer',
                'Plugin-Display-Version': displayVersion,
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/JACOCO',
                'Plugin-Key': 'jacoco',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'JaCoCo',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/sonar-jacoco',
                'Plugin-Version': archiveVersion,
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'false',
                'Version': "${archiveVersion}",
        )
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact tasks.sourcesJar
            artifact tasks.javadocJar
            pom {
                name = projectTitle
                description = project.description
                url = 'http://www.sonarqube.org/'
                organization {
                    name = 'SonarSource'
                    url = 'http://www.sonarsource.com'
                }
                licenses {
                    license {
                        name = 'GNU LGPL 3'
                        url = 'http://www.gnu.org/licenses/lgpl.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/SonarSource/sonar-jacoco'
                }
                developers {
                    developer {
                        id = 'sonarsource-team'
                        name = 'SonarSource Team'
                    }
                }
            }
        }
    }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingKeyId = findProperty("signingKeyId")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  required {
    def branch = System.getenv()["CIRRUS_BRANCH"]
    return (branch == 'master' || branch ==~ 'branch-[\\d.]+') &&
      gradle.taskGraph.hasTask(":artifactoryPublish")
  }
  sign publishing.publications
}

artifactory {
    clientConfig.setIncludeEnvVars(true)
    clientConfig.setEnvVarsExcludePatterns('*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*,*key*,*KEY*,*signing*')
    contextUrl = System.getenv('ARTIFACTORY_URL')
    publish {
        repository {
            repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
            username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME')
            password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD')
        }
        defaults {
            properties = [
                'build.name': 'sonar-jacoco',
                'build.number': (System.getenv('BUILD_ID') ?: System.getenv('BUILD_NUMBER')),
                'pr.branch.target': System.getenv('PULL_REQUEST_BRANCH_TARGET'),
                'pr.number': System.getenv('PULL_REQUEST_NUMBER'),
                'vcs.branch': System.getenv('GIT_BRANCH'),
                'vcs.revision': System.getenv('GIT_COMMIT'),
                'version': version
            ]
            publications('mavenJava')
            publishPom = true
            publishIvy = false
        }
    }

    clientConfig.info.setBuildName('sonar-jacoco')
    clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))
    // Define the artifacts to be deployed to https://binaries.sonarsource.com on releases
    clientConfig.info.addEnvironmentProperty('ARTIFACTS_TO_PUBLISH', "${project.group}:sonar-jacoco-plugin:jar")
    // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.
    clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', "${version}")

}
